import org.gradle.util.VersionNumber

plugins {
    id "base"
    id "maven-publish"
    id "com.gradle.build-scan" version "2.3"
}

def groovyVersion = findProperty("groovyVersion") ?: "2.5.2"

/*
 * Change base version by applying a Git tag.
 *
 * Release snapshot version with ./gradlew publish -Prelease
 * Release final version with ./gradlew publish -Prelease=final
 */

def release = hasProperty("release")
def snapshot = groovyVersion.endsWith("-SNAPSHOT")

def gitVersion = ["git", "describe", "--dirty", "--abbrev=${snapshot ? 0 : 7}"].execute().text.trim()
if (release && gitVersion.contains("dirty")) {
    throw new RuntimeException("Cannot release a dirty version")
}
if (release && !snapshot && gitVersion.contains("-")) {
    throw new RuntimeException("Cannot release an untagged version")
}

group = "org.gradle.groovy"
version = "$gitVersion-$groovyVersion"
description "Replacement for groovy-all.jar discontinued in Groovy 2.5"

println "The version is: $version"

buildScan {
    server = "https://e.grdev.net"
    publishAlways()
    value("RELEASED_VERSION", version)
}

allprojects {
    repositories {
    	mavenCentral()
        maven { url = "https://oss.jfrog.org/artifactory/oss-snapshot-local" }
    }
}

configurations {
    groovy
    groovySources
    groovyJavadoc
    groovyGroovydoc
}

dependencies {
    groovy group: "org.codehaus.groovy", name: "groovy-all", version: groovyVersion
    if (VersionNumber.parse(groovyVersion) >= VersionNumber.parse("2.5.0")) {
       groovy group: "org.codehaus.groovy", name: "groovy-dateutil", version: groovyVersion
    }
}

task writeVersionProperties {
    def outputFile = file("${buildDir}/tmp/gradle-groovy-all-version.properties")
    inputs.property "version", version
    outputs.file outputFile
    doLast {
        outputFile.text = "version = $version\n"
    }
}

task configureGroovyAll {
    inputs.files writeVersionProperties.outputs
    inputs.files configurations.groovy

    doFirst {
        def extensionClasses = []
        def staticExtensionClasses = []

        tasks.groovyAll {
            from writeVersionProperties

            configurations.groovy.filter { it.name ==~ /groovy-.*\.jar/ }.each { groovyJar ->
                def extractedFiles = zipTree(groovyJar)

                extractedFiles.filter { it.name == "org.codehaus.groovy.runtime.ExtensionModule" }.each { extensionModuleFile ->
                    def extensionModule = new Properties()
                    extensionModuleFile.withInputStream { input ->
                        extensionModule.load(input)
                    }
                    extensionClasses << extensionModule.extensionClasses
                    staticExtensionClasses << extensionModule.staticExtensionClasses
                }

                from(extractedFiles) {
                    exclude { it.path == "META-INF/groovy/org.codehaus.groovy.runtime.ExtensionModule" }
                }
                manifest.from extractedFiles.find { it.name == "MANIFEST.MF" }
            }

            def extensionsModuleFile = file("${buildDir}/tmp/org.codehaus.groovy.runtime.ExtensionModule")

            def extensnionModuleProperties = new Properties()
            extensnionModuleProperties["moduleName"] = "groovy-all"
            extensnionModuleProperties["moduleVersion"] = groovyVersion
            extensnionModuleProperties["extensionClasses"] = extensionClasses.join(",")
            extensnionModuleProperties["staticExtensionClasses"] = staticExtensionClasses.join(",")

            delete(extensionsModuleFile)
            mkdir(extensionsModuleFile.parentFile)
            extensionsModuleFile.withOutputStream { out ->
                extensnionModuleProperties.store(out, null)
            }

            from(extensionsModuleFile) {
                into("META-INF/groovy")
            }
        }
    }
}

task groovyAll(type: Jar) {
    dependsOn configureGroovyAll
    // Keep all licenses and ExtensionModules
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    baseName = "groovy-all"
    destinationDir = file("build/artifacts/jar")
}

task download {
    inputs.files configurations.groovy
    outputs.dir "${buildDir}/artifacts"
    doLast {
        ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
            .forModule("org.codehaus.groovy", "groovy-all", groovyVersion)
            .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
            .execute()
        result.resolvedComponents.each { ComponentArtifactsResult component ->
            component.getArtifacts(SourcesArtifact).each { artifact ->
                copy {
                    from artifact.file
                    into "${buildDir}/artifacts/sources"
                }
            }
            component.getArtifacts(JavadocArtifact).each { artifact ->
                copy {
                    from artifact.file
                    into "${buildDir}/artifacts/javadoc"
                }
            }
        }
    }
}

task version {
    doLast {
        println version
    }
}

def jarArtifact = artifacts.add("default", groovyAll)
def sourcesArtifact = artifacts.add("default", file("${buildDir}/artifacts/sources/groovy-all-${groovyVersion}-sources.jar")) {
    builtBy download
    classifier "sources"
}
def javadocArtifact = artifacts.add("default", file("${buildDir}/artifacts/javadoc/groovy-all-${groovyVersion}-javadoc.jar")) {
    builtBy download
    classifier "javadoc"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jarArtifact
            artifact sourcesArtifact
            artifact javadocArtifact
        }
    }
    repositories {
        maven {
            name = "local"
            url = "$buildDir/repos/external"
        }
        if (release) {
            maven {
                name = "gradle"
                def repoType = snapshot ? "snapshots" : "releases"
                url = "https://repo.gradle.org/gradle/ext-$repoType-local"
                authentication {
                    basic(BasicAuthentication) {
                        credentials {
                            username = property("artifactoryUser") ?: "nouser"
                            password = property("artifactoryPassword") ?: "nopass"
                        }
                    }
                }
            }
        }
    }
}
